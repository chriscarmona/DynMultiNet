// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#ifndef RCPP_DynMultiNet_RCPPEXPORTS_H_GEN_
#define RCPP_DynMultiNet_RCPPEXPORTS_H_GEN_

#include <RcppArmadillo.h>
#include <Rcpp.h>

namespace DynMultiNet {

    using namespace Rcpp;

    namespace {
        void validateSignature(const char* sig) {
            Rcpp::Function require = Rcpp::Environment::base_env()["require"];
            require("DynMultiNet", Rcpp::Named("quietly") = true);
            typedef int(*Ptr_validate)(const char*);
            static Ptr_validate p_validate = (Ptr_validate)
                R_GetCCallable("DynMultiNet", "_DynMultiNet_RcppExport_validate");
            if (!p_validate(sig)) {
                throw Rcpp::function_not_exported(
                    "C++ function with signature '" + std::string(sig) + "' not found in DynMultiNet");
            }
        }
    }

    inline Rcpp::List sample_baseline_t_link_GP_cpp(arma::colvec eta_t, const arma::mat eta_t_cov_prior_inv, const arma::cube y_ijt, const arma::cube w_ijt, arma::cube gamma_ijt, const bool directed = false) {
        typedef SEXP(*Ptr_sample_baseline_t_link_GP_cpp)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_sample_baseline_t_link_GP_cpp p_sample_baseline_t_link_GP_cpp = NULL;
        if (p_sample_baseline_t_link_GP_cpp == NULL) {
            validateSignature("Rcpp::List(*sample_baseline_t_link_GP_cpp)(arma::colvec,const arma::mat,const arma::cube,const arma::cube,arma::cube,const bool)");
            p_sample_baseline_t_link_GP_cpp = (Ptr_sample_baseline_t_link_GP_cpp)R_GetCCallable("DynMultiNet", "_DynMultiNet_sample_baseline_t_link_GP_cpp");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_sample_baseline_t_link_GP_cpp(Shield<SEXP>(Rcpp::wrap(eta_t)), Shield<SEXP>(Rcpp::wrap(eta_t_cov_prior_inv)), Shield<SEXP>(Rcpp::wrap(y_ijt)), Shield<SEXP>(Rcpp::wrap(w_ijt)), Shield<SEXP>(Rcpp::wrap(gamma_ijt)), Shield<SEXP>(Rcpp::wrap(directed)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::List >(rcpp_result_gen);
    }

    inline Rcpp::List sample_coord_ith_link_GP_cpp(arma::cube ab_ith, const arma::cube y_ijt, const arma::cube w_ijt, arma::cube gamma_ijt, const arma::mat ab_t_sigma_prior_inv, const arma::colvec tau_h) {
        typedef SEXP(*Ptr_sample_coord_ith_link_GP_cpp)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_sample_coord_ith_link_GP_cpp p_sample_coord_ith_link_GP_cpp = NULL;
        if (p_sample_coord_ith_link_GP_cpp == NULL) {
            validateSignature("Rcpp::List(*sample_coord_ith_link_GP_cpp)(arma::cube,const arma::cube,const arma::cube,arma::cube,const arma::mat,const arma::colvec)");
            p_sample_coord_ith_link_GP_cpp = (Ptr_sample_coord_ith_link_GP_cpp)R_GetCCallable("DynMultiNet", "_DynMultiNet_sample_coord_ith_link_GP_cpp");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_sample_coord_ith_link_GP_cpp(Shield<SEXP>(Rcpp::wrap(ab_ith)), Shield<SEXP>(Rcpp::wrap(y_ijt)), Shield<SEXP>(Rcpp::wrap(w_ijt)), Shield<SEXP>(Rcpp::wrap(gamma_ijt)), Shield<SEXP>(Rcpp::wrap(ab_t_sigma_prior_inv)), Shield<SEXP>(Rcpp::wrap(tau_h)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::List >(rcpp_result_gen);
    }

    inline Rcpp::List sample_coord_ith_shared_link_GP_cpp(arma::cube ab_ith, const arma::field<arma::cube> y_ijtk, const arma::field<arma::cube> w_ijtk, arma::field<arma::cube> gamma_ijtk, const arma::mat ab_t_sigma_prior_inv, const arma::colvec tau_h) {
        typedef SEXP(*Ptr_sample_coord_ith_shared_link_GP_cpp)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_sample_coord_ith_shared_link_GP_cpp p_sample_coord_ith_shared_link_GP_cpp = NULL;
        if (p_sample_coord_ith_shared_link_GP_cpp == NULL) {
            validateSignature("Rcpp::List(*sample_coord_ith_shared_link_GP_cpp)(arma::cube,const arma::field<arma::cube>,const arma::field<arma::cube>,arma::field<arma::cube>,const arma::mat,const arma::colvec)");
            p_sample_coord_ith_shared_link_GP_cpp = (Ptr_sample_coord_ith_shared_link_GP_cpp)R_GetCCallable("DynMultiNet", "_DynMultiNet_sample_coord_ith_shared_link_GP_cpp");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_sample_coord_ith_shared_link_GP_cpp(Shield<SEXP>(Rcpp::wrap(ab_ith)), Shield<SEXP>(Rcpp::wrap(y_ijtk)), Shield<SEXP>(Rcpp::wrap(w_ijtk)), Shield<SEXP>(Rcpp::wrap(gamma_ijtk)), Shield<SEXP>(Rcpp::wrap(ab_t_sigma_prior_inv)), Shield<SEXP>(Rcpp::wrap(tau_h)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::List >(rcpp_result_gen);
    }

    inline Rcpp::List sample_coord_ith_link_dir_GP_cpp(arma::cube ab_ith_send, arma::cube ab_ith_receive, const arma::cube y_ijt, const arma::cube w_ijt, arma::cube gamma_ijt, const arma::mat ab_t_sigma_prior_inv, const arma::colvec tau_h_send, const arma::colvec tau_h_receive) {
        typedef SEXP(*Ptr_sample_coord_ith_link_dir_GP_cpp)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_sample_coord_ith_link_dir_GP_cpp p_sample_coord_ith_link_dir_GP_cpp = NULL;
        if (p_sample_coord_ith_link_dir_GP_cpp == NULL) {
            validateSignature("Rcpp::List(*sample_coord_ith_link_dir_GP_cpp)(arma::cube,arma::cube,const arma::cube,const arma::cube,arma::cube,const arma::mat,const arma::colvec,const arma::colvec)");
            p_sample_coord_ith_link_dir_GP_cpp = (Ptr_sample_coord_ith_link_dir_GP_cpp)R_GetCCallable("DynMultiNet", "_DynMultiNet_sample_coord_ith_link_dir_GP_cpp");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_sample_coord_ith_link_dir_GP_cpp(Shield<SEXP>(Rcpp::wrap(ab_ith_send)), Shield<SEXP>(Rcpp::wrap(ab_ith_receive)), Shield<SEXP>(Rcpp::wrap(y_ijt)), Shield<SEXP>(Rcpp::wrap(w_ijt)), Shield<SEXP>(Rcpp::wrap(gamma_ijt)), Shield<SEXP>(Rcpp::wrap(ab_t_sigma_prior_inv)), Shield<SEXP>(Rcpp::wrap(tau_h_send)), Shield<SEXP>(Rcpp::wrap(tau_h_receive)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::List >(rcpp_result_gen);
    }

    inline Rcpp::List sample_coord_ith_shared_link_dir_GP_cpp(arma::cube ab_ith_send, const arma::field<arma::cube> y_ijtk, const arma::field<arma::cube> w_ijtk, arma::field<arma::cube> gamma_ijtk, arma::cube ab_ith_receive, const arma::mat ab_t_sigma_prior_inv, const arma::colvec tau_h_shared_send, const arma::colvec tau_h_shared_receive) {
        typedef SEXP(*Ptr_sample_coord_ith_shared_link_dir_GP_cpp)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_sample_coord_ith_shared_link_dir_GP_cpp p_sample_coord_ith_shared_link_dir_GP_cpp = NULL;
        if (p_sample_coord_ith_shared_link_dir_GP_cpp == NULL) {
            validateSignature("Rcpp::List(*sample_coord_ith_shared_link_dir_GP_cpp)(arma::cube,const arma::field<arma::cube>,const arma::field<arma::cube>,arma::field<arma::cube>,arma::cube,const arma::mat,const arma::colvec,const arma::colvec)");
            p_sample_coord_ith_shared_link_dir_GP_cpp = (Ptr_sample_coord_ith_shared_link_dir_GP_cpp)R_GetCCallable("DynMultiNet", "_DynMultiNet_sample_coord_ith_shared_link_dir_GP_cpp");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_sample_coord_ith_shared_link_dir_GP_cpp(Shield<SEXP>(Rcpp::wrap(ab_ith_send)), Shield<SEXP>(Rcpp::wrap(y_ijtk)), Shield<SEXP>(Rcpp::wrap(w_ijtk)), Shield<SEXP>(Rcpp::wrap(gamma_ijtk)), Shield<SEXP>(Rcpp::wrap(ab_ith_receive)), Shield<SEXP>(Rcpp::wrap(ab_t_sigma_prior_inv)), Shield<SEXP>(Rcpp::wrap(tau_h_shared_send)), Shield<SEXP>(Rcpp::wrap(tau_h_shared_receive)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::List >(rcpp_result_gen);
    }

    inline Rcpp::List sample_add_eff_it_link_cpp(arma::colvec sp_it, const arma::mat sp_t_cov_prior_inv, const arma::cube y_ijt, arma::cube w_ijt, arma::cube gamma_ijt, const bool directed = false) {
        typedef SEXP(*Ptr_sample_add_eff_it_link_cpp)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_sample_add_eff_it_link_cpp p_sample_add_eff_it_link_cpp = NULL;
        if (p_sample_add_eff_it_link_cpp == NULL) {
            validateSignature("Rcpp::List(*sample_add_eff_it_link_cpp)(arma::colvec,const arma::mat,const arma::cube,arma::cube,arma::cube,const bool)");
            p_sample_add_eff_it_link_cpp = (Ptr_sample_add_eff_it_link_cpp)R_GetCCallable("DynMultiNet", "_DynMultiNet_sample_add_eff_it_link_cpp");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_sample_add_eff_it_link_cpp(Shield<SEXP>(Rcpp::wrap(sp_it)), Shield<SEXP>(Rcpp::wrap(sp_t_cov_prior_inv)), Shield<SEXP>(Rcpp::wrap(y_ijt)), Shield<SEXP>(Rcpp::wrap(w_ijt)), Shield<SEXP>(Rcpp::wrap(gamma_ijt)), Shield<SEXP>(Rcpp::wrap(directed)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::List >(rcpp_result_gen);
    }

    inline Rcpp::List sample_add_eff_it_shared_link_cpp(arma::colvec sp_it, const arma::mat sp_t_cov_prior_inv, const arma::field<arma::cube> y_ijtk, arma::field<arma::cube> w_ijtk, arma::field<arma::cube> gamma_ijtk, const bool directed = false) {
        typedef SEXP(*Ptr_sample_add_eff_it_shared_link_cpp)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_sample_add_eff_it_shared_link_cpp p_sample_add_eff_it_shared_link_cpp = NULL;
        if (p_sample_add_eff_it_shared_link_cpp == NULL) {
            validateSignature("Rcpp::List(*sample_add_eff_it_shared_link_cpp)(arma::colvec,const arma::mat,const arma::field<arma::cube>,arma::field<arma::cube>,arma::field<arma::cube>,const bool)");
            p_sample_add_eff_it_shared_link_cpp = (Ptr_sample_add_eff_it_shared_link_cpp)R_GetCCallable("DynMultiNet", "_DynMultiNet_sample_add_eff_it_shared_link_cpp");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_sample_add_eff_it_shared_link_cpp(Shield<SEXP>(Rcpp::wrap(sp_it)), Shield<SEXP>(Rcpp::wrap(sp_t_cov_prior_inv)), Shield<SEXP>(Rcpp::wrap(y_ijtk)), Shield<SEXP>(Rcpp::wrap(w_ijtk)), Shield<SEXP>(Rcpp::wrap(gamma_ijtk)), Shield<SEXP>(Rcpp::wrap(directed)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::List >(rcpp_result_gen);
    }

    inline Rcpp::List sample_coeff_tp_link_cpp(arma::mat beta_tp, const arma::mat beta_t_cov_prior_inv, const arma::field<arma::cube> y_ijtk, arma::field<arma::cube> w_ijtk, arma::field<arma::cube> gamma_ijtk, const arma::mat x_ijtkp_mat, const bool directed = false) {
        typedef SEXP(*Ptr_sample_coeff_tp_link_cpp)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_sample_coeff_tp_link_cpp p_sample_coeff_tp_link_cpp = NULL;
        if (p_sample_coeff_tp_link_cpp == NULL) {
            validateSignature("Rcpp::List(*sample_coeff_tp_link_cpp)(arma::mat,const arma::mat,const arma::field<arma::cube>,arma::field<arma::cube>,arma::field<arma::cube>,const arma::mat,const bool)");
            p_sample_coeff_tp_link_cpp = (Ptr_sample_coeff_tp_link_cpp)R_GetCCallable("DynMultiNet", "_DynMultiNet_sample_coeff_tp_link_cpp");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_sample_coeff_tp_link_cpp(Shield<SEXP>(Rcpp::wrap(beta_tp)), Shield<SEXP>(Rcpp::wrap(beta_t_cov_prior_inv)), Shield<SEXP>(Rcpp::wrap(y_ijtk)), Shield<SEXP>(Rcpp::wrap(w_ijtk)), Shield<SEXP>(Rcpp::wrap(gamma_ijtk)), Shield<SEXP>(Rcpp::wrap(x_ijtkp_mat)), Shield<SEXP>(Rcpp::wrap(directed)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::List >(rcpp_result_gen);
    }

    inline Rcpp::List sample_baseline_t_link_nGP_cpp(const arma::colvec eta_t, arma::mat alpha_eta_t, const arma::cube y_ijt, const arma::cube w_ijt, arma::cube gamma_ijt, const arma::cube nGP_G_t, const arma::cube nGP_H_t, const arma::cube nGP_Wchol_t, const bool directed = false) {
        typedef SEXP(*Ptr_sample_baseline_t_link_nGP_cpp)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_sample_baseline_t_link_nGP_cpp p_sample_baseline_t_link_nGP_cpp = NULL;
        if (p_sample_baseline_t_link_nGP_cpp == NULL) {
            validateSignature("Rcpp::List(*sample_baseline_t_link_nGP_cpp)(const arma::colvec,arma::mat,const arma::cube,const arma::cube,arma::cube,const arma::cube,const arma::cube,const arma::cube,const bool)");
            p_sample_baseline_t_link_nGP_cpp = (Ptr_sample_baseline_t_link_nGP_cpp)R_GetCCallable("DynMultiNet", "_DynMultiNet_sample_baseline_t_link_nGP_cpp");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_sample_baseline_t_link_nGP_cpp(Shield<SEXP>(Rcpp::wrap(eta_t)), Shield<SEXP>(Rcpp::wrap(alpha_eta_t)), Shield<SEXP>(Rcpp::wrap(y_ijt)), Shield<SEXP>(Rcpp::wrap(w_ijt)), Shield<SEXP>(Rcpp::wrap(gamma_ijt)), Shield<SEXP>(Rcpp::wrap(nGP_G_t)), Shield<SEXP>(Rcpp::wrap(nGP_H_t)), Shield<SEXP>(Rcpp::wrap(nGP_Wchol_t)), Shield<SEXP>(Rcpp::wrap(directed)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::List >(rcpp_result_gen);
    }

    inline Rcpp::List sample_coord_ith_link_nGP_cpp(const arma::cube ab_ith, arma::field<arma::cube> alpha_ab_ith, const arma::cube y_ijt, const arma::cube w_ijt, arma::cube gamma_ijt, const arma::field<arma::cube> nGP_G_t, const arma::field<arma::cube> nGP_H_t, const arma::field<arma::cube> nGP_Wchol_t, const bool verbose = false) {
        typedef SEXP(*Ptr_sample_coord_ith_link_nGP_cpp)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_sample_coord_ith_link_nGP_cpp p_sample_coord_ith_link_nGP_cpp = NULL;
        if (p_sample_coord_ith_link_nGP_cpp == NULL) {
            validateSignature("Rcpp::List(*sample_coord_ith_link_nGP_cpp)(const arma::cube,arma::field<arma::cube>,const arma::cube,const arma::cube,arma::cube,const arma::field<arma::cube>,const arma::field<arma::cube>,const arma::field<arma::cube>,const bool)");
            p_sample_coord_ith_link_nGP_cpp = (Ptr_sample_coord_ith_link_nGP_cpp)R_GetCCallable("DynMultiNet", "_DynMultiNet_sample_coord_ith_link_nGP_cpp");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_sample_coord_ith_link_nGP_cpp(Shield<SEXP>(Rcpp::wrap(ab_ith)), Shield<SEXP>(Rcpp::wrap(alpha_ab_ith)), Shield<SEXP>(Rcpp::wrap(y_ijt)), Shield<SEXP>(Rcpp::wrap(w_ijt)), Shield<SEXP>(Rcpp::wrap(gamma_ijt)), Shield<SEXP>(Rcpp::wrap(nGP_G_t)), Shield<SEXP>(Rcpp::wrap(nGP_H_t)), Shield<SEXP>(Rcpp::wrap(nGP_Wchol_t)), Shield<SEXP>(Rcpp::wrap(verbose)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::List >(rcpp_result_gen);
    }

    inline Rcpp::List sample_coord_ith_shared_link_nGP_cpp(const arma::cube ab_ith, arma::field<arma::cube> alpha_ab_ith, const arma::field<arma::cube> y_ijtk, const arma::field<arma::cube> w_ijtk, arma::field<arma::cube> gamma_ijtk, const arma::field<arma::cube> nGP_G_t, const arma::field<arma::cube> nGP_H_t, const arma::field<arma::cube> nGP_Wchol_t) {
        typedef SEXP(*Ptr_sample_coord_ith_shared_link_nGP_cpp)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_sample_coord_ith_shared_link_nGP_cpp p_sample_coord_ith_shared_link_nGP_cpp = NULL;
        if (p_sample_coord_ith_shared_link_nGP_cpp == NULL) {
            validateSignature("Rcpp::List(*sample_coord_ith_shared_link_nGP_cpp)(const arma::cube,arma::field<arma::cube>,const arma::field<arma::cube>,const arma::field<arma::cube>,arma::field<arma::cube>,const arma::field<arma::cube>,const arma::field<arma::cube>,const arma::field<arma::cube>)");
            p_sample_coord_ith_shared_link_nGP_cpp = (Ptr_sample_coord_ith_shared_link_nGP_cpp)R_GetCCallable("DynMultiNet", "_DynMultiNet_sample_coord_ith_shared_link_nGP_cpp");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_sample_coord_ith_shared_link_nGP_cpp(Shield<SEXP>(Rcpp::wrap(ab_ith)), Shield<SEXP>(Rcpp::wrap(alpha_ab_ith)), Shield<SEXP>(Rcpp::wrap(y_ijtk)), Shield<SEXP>(Rcpp::wrap(w_ijtk)), Shield<SEXP>(Rcpp::wrap(gamma_ijtk)), Shield<SEXP>(Rcpp::wrap(nGP_G_t)), Shield<SEXP>(Rcpp::wrap(nGP_H_t)), Shield<SEXP>(Rcpp::wrap(nGP_Wchol_t)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::List >(rcpp_result_gen);
    }

    inline Rcpp::List sample_coord_ith_link_dir_nGP_cpp(const arma::cube ab_ith_send, const arma::cube ab_ith_receive, arma::field<arma::cube> alpha_ab_ith_send, arma::field<arma::cube> alpha_ab_ith_receive, const arma::cube y_ijt, const arma::cube w_ijt, arma::cube gamma_ijt, const arma::field<arma::cube> nGP_G_t, const arma::field<arma::cube> nGP_H_t, const arma::field<arma::cube> nGP_Wchol_t) {
        typedef SEXP(*Ptr_sample_coord_ith_link_dir_nGP_cpp)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_sample_coord_ith_link_dir_nGP_cpp p_sample_coord_ith_link_dir_nGP_cpp = NULL;
        if (p_sample_coord_ith_link_dir_nGP_cpp == NULL) {
            validateSignature("Rcpp::List(*sample_coord_ith_link_dir_nGP_cpp)(const arma::cube,const arma::cube,arma::field<arma::cube>,arma::field<arma::cube>,const arma::cube,const arma::cube,arma::cube,const arma::field<arma::cube>,const arma::field<arma::cube>,const arma::field<arma::cube>)");
            p_sample_coord_ith_link_dir_nGP_cpp = (Ptr_sample_coord_ith_link_dir_nGP_cpp)R_GetCCallable("DynMultiNet", "_DynMultiNet_sample_coord_ith_link_dir_nGP_cpp");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_sample_coord_ith_link_dir_nGP_cpp(Shield<SEXP>(Rcpp::wrap(ab_ith_send)), Shield<SEXP>(Rcpp::wrap(ab_ith_receive)), Shield<SEXP>(Rcpp::wrap(alpha_ab_ith_send)), Shield<SEXP>(Rcpp::wrap(alpha_ab_ith_receive)), Shield<SEXP>(Rcpp::wrap(y_ijt)), Shield<SEXP>(Rcpp::wrap(w_ijt)), Shield<SEXP>(Rcpp::wrap(gamma_ijt)), Shield<SEXP>(Rcpp::wrap(nGP_G_t)), Shield<SEXP>(Rcpp::wrap(nGP_H_t)), Shield<SEXP>(Rcpp::wrap(nGP_Wchol_t)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::List >(rcpp_result_gen);
    }

    inline Rcpp::List sample_coord_ith_shared_link_dir_nGP_cpp(const arma::cube ab_ith_send, const arma::cube ab_ith_receive, arma::field<arma::cube> alpha_ab_ith_send, arma::field<arma::cube> alpha_ab_ith_receive, const arma::field<arma::cube> y_ijtk, const arma::field<arma::cube> w_ijtk, arma::field<arma::cube> gamma_ijtk, const arma::field<arma::cube> nGP_G_t, const arma::field<arma::cube> nGP_H_t, const arma::field<arma::cube> nGP_Wchol_t) {
        typedef SEXP(*Ptr_sample_coord_ith_shared_link_dir_nGP_cpp)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_sample_coord_ith_shared_link_dir_nGP_cpp p_sample_coord_ith_shared_link_dir_nGP_cpp = NULL;
        if (p_sample_coord_ith_shared_link_dir_nGP_cpp == NULL) {
            validateSignature("Rcpp::List(*sample_coord_ith_shared_link_dir_nGP_cpp)(const arma::cube,const arma::cube,arma::field<arma::cube>,arma::field<arma::cube>,const arma::field<arma::cube>,const arma::field<arma::cube>,arma::field<arma::cube>,const arma::field<arma::cube>,const arma::field<arma::cube>,const arma::field<arma::cube>)");
            p_sample_coord_ith_shared_link_dir_nGP_cpp = (Ptr_sample_coord_ith_shared_link_dir_nGP_cpp)R_GetCCallable("DynMultiNet", "_DynMultiNet_sample_coord_ith_shared_link_dir_nGP_cpp");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_sample_coord_ith_shared_link_dir_nGP_cpp(Shield<SEXP>(Rcpp::wrap(ab_ith_send)), Shield<SEXP>(Rcpp::wrap(ab_ith_receive)), Shield<SEXP>(Rcpp::wrap(alpha_ab_ith_send)), Shield<SEXP>(Rcpp::wrap(alpha_ab_ith_receive)), Shield<SEXP>(Rcpp::wrap(y_ijtk)), Shield<SEXP>(Rcpp::wrap(w_ijtk)), Shield<SEXP>(Rcpp::wrap(gamma_ijtk)), Shield<SEXP>(Rcpp::wrap(nGP_G_t)), Shield<SEXP>(Rcpp::wrap(nGP_H_t)), Shield<SEXP>(Rcpp::wrap(nGP_Wchol_t)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::List >(rcpp_result_gen);
    }

    inline Rcpp::List sample_baseline_tk_weight_cpp(arma::colvec theta_t, const arma::cube y_ijt, arma::cube mu_ijt, const double sigma_k, const arma::mat theta_t_cov_prior_inv, const bool lat_mean, double theta_t_bar, const double sigma_theta_bar, const bool directed = false) {
        typedef SEXP(*Ptr_sample_baseline_tk_weight_cpp)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_sample_baseline_tk_weight_cpp p_sample_baseline_tk_weight_cpp = NULL;
        if (p_sample_baseline_tk_weight_cpp == NULL) {
            validateSignature("Rcpp::List(*sample_baseline_tk_weight_cpp)(arma::colvec,const arma::cube,arma::cube,const double,const arma::mat,const bool,double,const double,const bool)");
            p_sample_baseline_tk_weight_cpp = (Ptr_sample_baseline_tk_weight_cpp)R_GetCCallable("DynMultiNet", "_DynMultiNet_sample_baseline_tk_weight_cpp");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_sample_baseline_tk_weight_cpp(Shield<SEXP>(Rcpp::wrap(theta_t)), Shield<SEXP>(Rcpp::wrap(y_ijt)), Shield<SEXP>(Rcpp::wrap(mu_ijt)), Shield<SEXP>(Rcpp::wrap(sigma_k)), Shield<SEXP>(Rcpp::wrap(theta_t_cov_prior_inv)), Shield<SEXP>(Rcpp::wrap(lat_mean)), Shield<SEXP>(Rcpp::wrap(theta_t_bar)), Shield<SEXP>(Rcpp::wrap(sigma_theta_bar)), Shield<SEXP>(Rcpp::wrap(directed)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::List >(rcpp_result_gen);
    }

    inline Rcpp::List sample_coord_ith_weight_cpp(arma::cube uv_ith, const arma::mat uv_t_sigma_prior_inv, const arma::colvec tau_h, const arma::cube y_ijt, arma::cube mu_ijt, const double sigma_k) {
        typedef SEXP(*Ptr_sample_coord_ith_weight_cpp)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_sample_coord_ith_weight_cpp p_sample_coord_ith_weight_cpp = NULL;
        if (p_sample_coord_ith_weight_cpp == NULL) {
            validateSignature("Rcpp::List(*sample_coord_ith_weight_cpp)(arma::cube,const arma::mat,const arma::colvec,const arma::cube,arma::cube,const double)");
            p_sample_coord_ith_weight_cpp = (Ptr_sample_coord_ith_weight_cpp)R_GetCCallable("DynMultiNet", "_DynMultiNet_sample_coord_ith_weight_cpp");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_sample_coord_ith_weight_cpp(Shield<SEXP>(Rcpp::wrap(uv_ith)), Shield<SEXP>(Rcpp::wrap(uv_t_sigma_prior_inv)), Shield<SEXP>(Rcpp::wrap(tau_h)), Shield<SEXP>(Rcpp::wrap(y_ijt)), Shield<SEXP>(Rcpp::wrap(mu_ijt)), Shield<SEXP>(Rcpp::wrap(sigma_k)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::List >(rcpp_result_gen);
    }

    inline Rcpp::List sample_coord_ith_shared_weight_cpp(arma::cube uv_ith_shared, const arma::mat uv_t_sigma_prior_inv, const arma::colvec tau_h, const arma::field<arma::cube> y_ijtk, arma::field<arma::cube> mu_ijtk, const arma::colvec sigma_k) {
        typedef SEXP(*Ptr_sample_coord_ith_shared_weight_cpp)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_sample_coord_ith_shared_weight_cpp p_sample_coord_ith_shared_weight_cpp = NULL;
        if (p_sample_coord_ith_shared_weight_cpp == NULL) {
            validateSignature("Rcpp::List(*sample_coord_ith_shared_weight_cpp)(arma::cube,const arma::mat,const arma::colvec,const arma::field<arma::cube>,arma::field<arma::cube>,const arma::colvec)");
            p_sample_coord_ith_shared_weight_cpp = (Ptr_sample_coord_ith_shared_weight_cpp)R_GetCCallable("DynMultiNet", "_DynMultiNet_sample_coord_ith_shared_weight_cpp");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_sample_coord_ith_shared_weight_cpp(Shield<SEXP>(Rcpp::wrap(uv_ith_shared)), Shield<SEXP>(Rcpp::wrap(uv_t_sigma_prior_inv)), Shield<SEXP>(Rcpp::wrap(tau_h)), Shield<SEXP>(Rcpp::wrap(y_ijtk)), Shield<SEXP>(Rcpp::wrap(mu_ijtk)), Shield<SEXP>(Rcpp::wrap(sigma_k)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::List >(rcpp_result_gen);
    }

    inline Rcpp::List sample_coord_ith_weight_dir_cpp(arma::cube u_ith, arma::cube v_ith, const arma::cube y_ijt, arma::cube mu_ijt, const double sigma_k, const arma::mat uv_t_sigma_prior_inv, const bool lat_mean, arma::mat u_ith_bar, arma::mat v_ith_bar, const double sigma_uv_bar, const arma::colvec tau_h_send, const arma::colvec tau_h_receive) {
        typedef SEXP(*Ptr_sample_coord_ith_weight_dir_cpp)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_sample_coord_ith_weight_dir_cpp p_sample_coord_ith_weight_dir_cpp = NULL;
        if (p_sample_coord_ith_weight_dir_cpp == NULL) {
            validateSignature("Rcpp::List(*sample_coord_ith_weight_dir_cpp)(arma::cube,arma::cube,const arma::cube,arma::cube,const double,const arma::mat,const bool,arma::mat,arma::mat,const double,const arma::colvec,const arma::colvec)");
            p_sample_coord_ith_weight_dir_cpp = (Ptr_sample_coord_ith_weight_dir_cpp)R_GetCCallable("DynMultiNet", "_DynMultiNet_sample_coord_ith_weight_dir_cpp");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_sample_coord_ith_weight_dir_cpp(Shield<SEXP>(Rcpp::wrap(u_ith)), Shield<SEXP>(Rcpp::wrap(v_ith)), Shield<SEXP>(Rcpp::wrap(y_ijt)), Shield<SEXP>(Rcpp::wrap(mu_ijt)), Shield<SEXP>(Rcpp::wrap(sigma_k)), Shield<SEXP>(Rcpp::wrap(uv_t_sigma_prior_inv)), Shield<SEXP>(Rcpp::wrap(lat_mean)), Shield<SEXP>(Rcpp::wrap(u_ith_bar)), Shield<SEXP>(Rcpp::wrap(v_ith_bar)), Shield<SEXP>(Rcpp::wrap(sigma_uv_bar)), Shield<SEXP>(Rcpp::wrap(tau_h_send)), Shield<SEXP>(Rcpp::wrap(tau_h_receive)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::List >(rcpp_result_gen);
    }

    inline Rcpp::List sample_coord_ith_shared_weight_dir_cpp(arma::cube u_ith_shared, arma::cube v_ith_shared, const arma::field<arma::cube> y_ijtk, arma::field<arma::cube> mu_ijtk, const arma::colvec sigma_k, const arma::mat uv_t_sigma_prior_inv, const bool lat_mean, arma::mat u_ith_shared_bar, arma::mat v_ith_shared_bar, const double sigma_uv_bar, const arma::colvec tau_h_shared_send, const arma::colvec tau_h_shared_receive) {
        typedef SEXP(*Ptr_sample_coord_ith_shared_weight_dir_cpp)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_sample_coord_ith_shared_weight_dir_cpp p_sample_coord_ith_shared_weight_dir_cpp = NULL;
        if (p_sample_coord_ith_shared_weight_dir_cpp == NULL) {
            validateSignature("Rcpp::List(*sample_coord_ith_shared_weight_dir_cpp)(arma::cube,arma::cube,const arma::field<arma::cube>,arma::field<arma::cube>,const arma::colvec,const arma::mat,const bool,arma::mat,arma::mat,const double,const arma::colvec,const arma::colvec)");
            p_sample_coord_ith_shared_weight_dir_cpp = (Ptr_sample_coord_ith_shared_weight_dir_cpp)R_GetCCallable("DynMultiNet", "_DynMultiNet_sample_coord_ith_shared_weight_dir_cpp");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_sample_coord_ith_shared_weight_dir_cpp(Shield<SEXP>(Rcpp::wrap(u_ith_shared)), Shield<SEXP>(Rcpp::wrap(v_ith_shared)), Shield<SEXP>(Rcpp::wrap(y_ijtk)), Shield<SEXP>(Rcpp::wrap(mu_ijtk)), Shield<SEXP>(Rcpp::wrap(sigma_k)), Shield<SEXP>(Rcpp::wrap(uv_t_sigma_prior_inv)), Shield<SEXP>(Rcpp::wrap(lat_mean)), Shield<SEXP>(Rcpp::wrap(u_ith_shared_bar)), Shield<SEXP>(Rcpp::wrap(v_ith_shared_bar)), Shield<SEXP>(Rcpp::wrap(sigma_uv_bar)), Shield<SEXP>(Rcpp::wrap(tau_h_shared_send)), Shield<SEXP>(Rcpp::wrap(tau_h_shared_receive)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::List >(rcpp_result_gen);
    }

    inline Rcpp::List sample_add_eff_it_weight_cpp(arma::colvec sp_it, const arma::mat sp_t_cov_prior_inv, const arma::cube y_ijt, arma::cube mu_ijt, const double sigma_k, const bool directed = false) {
        typedef SEXP(*Ptr_sample_add_eff_it_weight_cpp)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_sample_add_eff_it_weight_cpp p_sample_add_eff_it_weight_cpp = NULL;
        if (p_sample_add_eff_it_weight_cpp == NULL) {
            validateSignature("Rcpp::List(*sample_add_eff_it_weight_cpp)(arma::colvec,const arma::mat,const arma::cube,arma::cube,const double,const bool)");
            p_sample_add_eff_it_weight_cpp = (Ptr_sample_add_eff_it_weight_cpp)R_GetCCallable("DynMultiNet", "_DynMultiNet_sample_add_eff_it_weight_cpp");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_sample_add_eff_it_weight_cpp(Shield<SEXP>(Rcpp::wrap(sp_it)), Shield<SEXP>(Rcpp::wrap(sp_t_cov_prior_inv)), Shield<SEXP>(Rcpp::wrap(y_ijt)), Shield<SEXP>(Rcpp::wrap(mu_ijt)), Shield<SEXP>(Rcpp::wrap(sigma_k)), Shield<SEXP>(Rcpp::wrap(directed)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::List >(rcpp_result_gen);
    }

    inline Rcpp::List sample_add_eff_it_shared_weight_cpp(arma::colvec sp_it, const arma::field<arma::cube> y_ijtk, arma::field<arma::cube> mu_ijtk, const arma::colvec sigma_k, const arma::mat sp_t_cov_prior_inv, const bool lat_mean, arma::colvec sp_it_bar, const double sigma_sp_bar, const bool directed = false) {
        typedef SEXP(*Ptr_sample_add_eff_it_shared_weight_cpp)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_sample_add_eff_it_shared_weight_cpp p_sample_add_eff_it_shared_weight_cpp = NULL;
        if (p_sample_add_eff_it_shared_weight_cpp == NULL) {
            validateSignature("Rcpp::List(*sample_add_eff_it_shared_weight_cpp)(arma::colvec,const arma::field<arma::cube>,arma::field<arma::cube>,const arma::colvec,const arma::mat,const bool,arma::colvec,const double,const bool)");
            p_sample_add_eff_it_shared_weight_cpp = (Ptr_sample_add_eff_it_shared_weight_cpp)R_GetCCallable("DynMultiNet", "_DynMultiNet_sample_add_eff_it_shared_weight_cpp");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_sample_add_eff_it_shared_weight_cpp(Shield<SEXP>(Rcpp::wrap(sp_it)), Shield<SEXP>(Rcpp::wrap(y_ijtk)), Shield<SEXP>(Rcpp::wrap(mu_ijtk)), Shield<SEXP>(Rcpp::wrap(sigma_k)), Shield<SEXP>(Rcpp::wrap(sp_t_cov_prior_inv)), Shield<SEXP>(Rcpp::wrap(lat_mean)), Shield<SEXP>(Rcpp::wrap(sp_it_bar)), Shield<SEXP>(Rcpp::wrap(sigma_sp_bar)), Shield<SEXP>(Rcpp::wrap(directed)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::List >(rcpp_result_gen);
    }

    inline Rcpp::List sample_coeff_tp_weight_cpp(arma::mat beta_tp, const arma::mat beta_t_cov_prior_inv, const arma::field<arma::cube> y_ijtk, arma::field<arma::cube> mu_ijtk, const arma::colvec sigma_k, const arma::mat x_ijtkp_mat, const bool directed = false) {
        typedef SEXP(*Ptr_sample_coeff_tp_weight_cpp)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_sample_coeff_tp_weight_cpp p_sample_coeff_tp_weight_cpp = NULL;
        if (p_sample_coeff_tp_weight_cpp == NULL) {
            validateSignature("Rcpp::List(*sample_coeff_tp_weight_cpp)(arma::mat,const arma::mat,const arma::field<arma::cube>,arma::field<arma::cube>,const arma::colvec,const arma::mat,const bool)");
            p_sample_coeff_tp_weight_cpp = (Ptr_sample_coeff_tp_weight_cpp)R_GetCCallable("DynMultiNet", "_DynMultiNet_sample_coeff_tp_weight_cpp");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_sample_coeff_tp_weight_cpp(Shield<SEXP>(Rcpp::wrap(beta_tp)), Shield<SEXP>(Rcpp::wrap(beta_t_cov_prior_inv)), Shield<SEXP>(Rcpp::wrap(y_ijtk)), Shield<SEXP>(Rcpp::wrap(mu_ijtk)), Shield<SEXP>(Rcpp::wrap(sigma_k)), Shield<SEXP>(Rcpp::wrap(x_ijtkp_mat)), Shield<SEXP>(Rcpp::wrap(directed)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::List >(rcpp_result_gen);
    }

    inline double sample_var_weight_cpp(double sigma_k, double sigma_k_prop_int, const arma::cube y_ijt, const arma::cube mu_ijt, const bool directed = false) {
        typedef SEXP(*Ptr_sample_var_weight_cpp)(SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_sample_var_weight_cpp p_sample_var_weight_cpp = NULL;
        if (p_sample_var_weight_cpp == NULL) {
            validateSignature("double(*sample_var_weight_cpp)(double,double,const arma::cube,const arma::cube,const bool)");
            p_sample_var_weight_cpp = (Ptr_sample_var_weight_cpp)R_GetCCallable("DynMultiNet", "_DynMultiNet_sample_var_weight_cpp");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_sample_var_weight_cpp(Shield<SEXP>(Rcpp::wrap(sigma_k)), Shield<SEXP>(Rcpp::wrap(sigma_k_prop_int)), Shield<SEXP>(Rcpp::wrap(y_ijt)), Shield<SEXP>(Rcpp::wrap(mu_ijt)), Shield<SEXP>(Rcpp::wrap(directed)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<double >(rcpp_result_gen);
    }

    inline Rcpp::List sample_baseline_t_weight_nGP_cpp(const arma::colvec eta_t, arma::mat alpha_eta_t, const arma::cube y_ijt, arma::cube mu_ijt, const arma::cube nGP_G_t, const arma::cube nGP_H_t, const arma::cube nGP_Wchol_t, const double sigma_k, const bool directed = false) {
        typedef SEXP(*Ptr_sample_baseline_t_weight_nGP_cpp)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_sample_baseline_t_weight_nGP_cpp p_sample_baseline_t_weight_nGP_cpp = NULL;
        if (p_sample_baseline_t_weight_nGP_cpp == NULL) {
            validateSignature("Rcpp::List(*sample_baseline_t_weight_nGP_cpp)(const arma::colvec,arma::mat,const arma::cube,arma::cube,const arma::cube,const arma::cube,const arma::cube,const double,const bool)");
            p_sample_baseline_t_weight_nGP_cpp = (Ptr_sample_baseline_t_weight_nGP_cpp)R_GetCCallable("DynMultiNet", "_DynMultiNet_sample_baseline_t_weight_nGP_cpp");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_sample_baseline_t_weight_nGP_cpp(Shield<SEXP>(Rcpp::wrap(eta_t)), Shield<SEXP>(Rcpp::wrap(alpha_eta_t)), Shield<SEXP>(Rcpp::wrap(y_ijt)), Shield<SEXP>(Rcpp::wrap(mu_ijt)), Shield<SEXP>(Rcpp::wrap(nGP_G_t)), Shield<SEXP>(Rcpp::wrap(nGP_H_t)), Shield<SEXP>(Rcpp::wrap(nGP_Wchol_t)), Shield<SEXP>(Rcpp::wrap(sigma_k)), Shield<SEXP>(Rcpp::wrap(directed)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::List >(rcpp_result_gen);
    }

    inline Rcpp::List sample_coord_ith_weight_nGP_cpp(const arma::cube sp_ith, arma::field<arma::cube> alpha_sp_ith, const arma::cube y_ijt, arma::cube mu_ijt, const arma::field<arma::cube> nGP_G_t, const arma::field<arma::cube> nGP_H_t, const arma::field<arma::cube> nGP_Wchol_t, const double sigma_k, const bool verbose = false) {
        typedef SEXP(*Ptr_sample_coord_ith_weight_nGP_cpp)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_sample_coord_ith_weight_nGP_cpp p_sample_coord_ith_weight_nGP_cpp = NULL;
        if (p_sample_coord_ith_weight_nGP_cpp == NULL) {
            validateSignature("Rcpp::List(*sample_coord_ith_weight_nGP_cpp)(const arma::cube,arma::field<arma::cube>,const arma::cube,arma::cube,const arma::field<arma::cube>,const arma::field<arma::cube>,const arma::field<arma::cube>,const double,const bool)");
            p_sample_coord_ith_weight_nGP_cpp = (Ptr_sample_coord_ith_weight_nGP_cpp)R_GetCCallable("DynMultiNet", "_DynMultiNet_sample_coord_ith_weight_nGP_cpp");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_sample_coord_ith_weight_nGP_cpp(Shield<SEXP>(Rcpp::wrap(sp_ith)), Shield<SEXP>(Rcpp::wrap(alpha_sp_ith)), Shield<SEXP>(Rcpp::wrap(y_ijt)), Shield<SEXP>(Rcpp::wrap(mu_ijt)), Shield<SEXP>(Rcpp::wrap(nGP_G_t)), Shield<SEXP>(Rcpp::wrap(nGP_H_t)), Shield<SEXP>(Rcpp::wrap(nGP_Wchol_t)), Shield<SEXP>(Rcpp::wrap(sigma_k)), Shield<SEXP>(Rcpp::wrap(verbose)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::List >(rcpp_result_gen);
    }

    inline Rcpp::List sample_coord_ith_shared_weight_nGP_cpp(const arma::cube sp_ith, arma::field<arma::cube> alpha_sp_ith, const arma::field<arma::cube> y_ijtk, arma::field<arma::cube> mu_ijtk, const arma::field<arma::cube> nGP_G_t, const arma::field<arma::cube> nGP_H_t, const arma::field<arma::cube> nGP_Wchol_t, const arma::colvec sigma_k) {
        typedef SEXP(*Ptr_sample_coord_ith_shared_weight_nGP_cpp)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_sample_coord_ith_shared_weight_nGP_cpp p_sample_coord_ith_shared_weight_nGP_cpp = NULL;
        if (p_sample_coord_ith_shared_weight_nGP_cpp == NULL) {
            validateSignature("Rcpp::List(*sample_coord_ith_shared_weight_nGP_cpp)(const arma::cube,arma::field<arma::cube>,const arma::field<arma::cube>,arma::field<arma::cube>,const arma::field<arma::cube>,const arma::field<arma::cube>,const arma::field<arma::cube>,const arma::colvec)");
            p_sample_coord_ith_shared_weight_nGP_cpp = (Ptr_sample_coord_ith_shared_weight_nGP_cpp)R_GetCCallable("DynMultiNet", "_DynMultiNet_sample_coord_ith_shared_weight_nGP_cpp");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_sample_coord_ith_shared_weight_nGP_cpp(Shield<SEXP>(Rcpp::wrap(sp_ith)), Shield<SEXP>(Rcpp::wrap(alpha_sp_ith)), Shield<SEXP>(Rcpp::wrap(y_ijtk)), Shield<SEXP>(Rcpp::wrap(mu_ijtk)), Shield<SEXP>(Rcpp::wrap(nGP_G_t)), Shield<SEXP>(Rcpp::wrap(nGP_H_t)), Shield<SEXP>(Rcpp::wrap(nGP_Wchol_t)), Shield<SEXP>(Rcpp::wrap(sigma_k)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::List >(rcpp_result_gen);
    }

    inline Rcpp::List sample_coord_ith_weight_dir_nGP_cpp(const arma::cube sp_ith_send, const arma::cube sp_ith_receive, arma::field<arma::cube> alpha_sp_ith_send, arma::field<arma::cube> alpha_sp_ith_receive, const arma::cube y_ijt, arma::cube mu_ijt, const arma::field<arma::cube> nGP_G_t, const arma::field<arma::cube> nGP_H_t, const arma::field<arma::cube> nGP_Wchol_t, const double sigma_k) {
        typedef SEXP(*Ptr_sample_coord_ith_weight_dir_nGP_cpp)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_sample_coord_ith_weight_dir_nGP_cpp p_sample_coord_ith_weight_dir_nGP_cpp = NULL;
        if (p_sample_coord_ith_weight_dir_nGP_cpp == NULL) {
            validateSignature("Rcpp::List(*sample_coord_ith_weight_dir_nGP_cpp)(const arma::cube,const arma::cube,arma::field<arma::cube>,arma::field<arma::cube>,const arma::cube,arma::cube,const arma::field<arma::cube>,const arma::field<arma::cube>,const arma::field<arma::cube>,const double)");
            p_sample_coord_ith_weight_dir_nGP_cpp = (Ptr_sample_coord_ith_weight_dir_nGP_cpp)R_GetCCallable("DynMultiNet", "_DynMultiNet_sample_coord_ith_weight_dir_nGP_cpp");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_sample_coord_ith_weight_dir_nGP_cpp(Shield<SEXP>(Rcpp::wrap(sp_ith_send)), Shield<SEXP>(Rcpp::wrap(sp_ith_receive)), Shield<SEXP>(Rcpp::wrap(alpha_sp_ith_send)), Shield<SEXP>(Rcpp::wrap(alpha_sp_ith_receive)), Shield<SEXP>(Rcpp::wrap(y_ijt)), Shield<SEXP>(Rcpp::wrap(mu_ijt)), Shield<SEXP>(Rcpp::wrap(nGP_G_t)), Shield<SEXP>(Rcpp::wrap(nGP_H_t)), Shield<SEXP>(Rcpp::wrap(nGP_Wchol_t)), Shield<SEXP>(Rcpp::wrap(sigma_k)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::List >(rcpp_result_gen);
    }

    inline Rcpp::List sample_coord_ith_shared_weight_dir_nGP_cpp(const arma::cube sp_ith_send, const arma::cube sp_ith_receive, arma::field<arma::cube> alpha_sp_ith_send, arma::field<arma::cube> alpha_sp_ith_receive, const arma::field<arma::cube> y_ijtk, arma::field<arma::cube> mu_ijtk, const arma::field<arma::cube> nGP_G_t, const arma::field<arma::cube> nGP_H_t, const arma::field<arma::cube> nGP_Wchol_t, const arma::colvec sigma_k) {
        typedef SEXP(*Ptr_sample_coord_ith_shared_weight_dir_nGP_cpp)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_sample_coord_ith_shared_weight_dir_nGP_cpp p_sample_coord_ith_shared_weight_dir_nGP_cpp = NULL;
        if (p_sample_coord_ith_shared_weight_dir_nGP_cpp == NULL) {
            validateSignature("Rcpp::List(*sample_coord_ith_shared_weight_dir_nGP_cpp)(const arma::cube,const arma::cube,arma::field<arma::cube>,arma::field<arma::cube>,const arma::field<arma::cube>,arma::field<arma::cube>,const arma::field<arma::cube>,const arma::field<arma::cube>,const arma::field<arma::cube>,const arma::colvec)");
            p_sample_coord_ith_shared_weight_dir_nGP_cpp = (Ptr_sample_coord_ith_shared_weight_dir_nGP_cpp)R_GetCCallable("DynMultiNet", "_DynMultiNet_sample_coord_ith_shared_weight_dir_nGP_cpp");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_sample_coord_ith_shared_weight_dir_nGP_cpp(Shield<SEXP>(Rcpp::wrap(sp_ith_send)), Shield<SEXP>(Rcpp::wrap(sp_ith_receive)), Shield<SEXP>(Rcpp::wrap(alpha_sp_ith_send)), Shield<SEXP>(Rcpp::wrap(alpha_sp_ith_receive)), Shield<SEXP>(Rcpp::wrap(y_ijtk)), Shield<SEXP>(Rcpp::wrap(mu_ijtk)), Shield<SEXP>(Rcpp::wrap(nGP_G_t)), Shield<SEXP>(Rcpp::wrap(nGP_H_t)), Shield<SEXP>(Rcpp::wrap(nGP_Wchol_t)), Shield<SEXP>(Rcpp::wrap(sigma_k)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::List >(rcpp_result_gen);
    }

    inline Rcpp::List kfsim(const arma::mat y, const arma::cube ZZ, const arma::cube HHchol, const arma::cube TT, const arma::cube RR, const arma::cube QQchol, const arma::colvec a1, const arma::mat P1chol, const unsigned int ind_output, const bool verbose = false) {
        typedef SEXP(*Ptr_kfsim)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_kfsim p_kfsim = NULL;
        if (p_kfsim == NULL) {
            validateSignature("Rcpp::List(*kfsim)(const arma::mat,const arma::cube,const arma::cube,const arma::cube,const arma::cube,const arma::cube,const arma::colvec,const arma::mat,const unsigned int,const bool)");
            p_kfsim = (Ptr_kfsim)R_GetCCallable("DynMultiNet", "_DynMultiNet_kfsim");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_kfsim(Shield<SEXP>(Rcpp::wrap(y)), Shield<SEXP>(Rcpp::wrap(ZZ)), Shield<SEXP>(Rcpp::wrap(HHchol)), Shield<SEXP>(Rcpp::wrap(TT)), Shield<SEXP>(Rcpp::wrap(RR)), Shield<SEXP>(Rcpp::wrap(QQchol)), Shield<SEXP>(Rcpp::wrap(a1)), Shield<SEXP>(Rcpp::wrap(P1chol)), Shield<SEXP>(Rcpp::wrap(ind_output)), Shield<SEXP>(Rcpp::wrap(verbose)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::List >(rcpp_result_gen);
    }

    inline arma::mat kfsim_cpp(const arma::mat y, const arma::cube ZZ, const arma::cube HHchol, const arma::cube TT, const arma::cube RR, const arma::cube QQchol, const arma::colvec a1, const arma::mat P1chol) {
        typedef SEXP(*Ptr_kfsim_cpp)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_kfsim_cpp p_kfsim_cpp = NULL;
        if (p_kfsim_cpp == NULL) {
            validateSignature("arma::mat(*kfsim_cpp)(const arma::mat,const arma::cube,const arma::cube,const arma::cube,const arma::cube,const arma::cube,const arma::colvec,const arma::mat)");
            p_kfsim_cpp = (Ptr_kfsim_cpp)R_GetCCallable("DynMultiNet", "_DynMultiNet_kfsim_cpp");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_kfsim_cpp(Shield<SEXP>(Rcpp::wrap(y)), Shield<SEXP>(Rcpp::wrap(ZZ)), Shield<SEXP>(Rcpp::wrap(HHchol)), Shield<SEXP>(Rcpp::wrap(TT)), Shield<SEXP>(Rcpp::wrap(RR)), Shield<SEXP>(Rcpp::wrap(QQchol)), Shield<SEXP>(Rcpp::wrap(a1)), Shield<SEXP>(Rcpp::wrap(P1chol)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<arma::mat >(rcpp_result_gen);
    }

}

#endif // RCPP_DynMultiNet_RCPPEXPORTS_H_GEN_
